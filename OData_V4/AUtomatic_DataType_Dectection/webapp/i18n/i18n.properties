# App Descriptor
#XTIT: Application name
appTitle=OData V4 - Step 1: The Initial App

#YDES: Application description
appDescription=OData V4 Tutorial

#XTIT: Page Title
peoplePageTitle=My Users

# Table Area
#XFLD: Label for User Name
userNameLabelText=User Name

#XFLD: Label for First Name
firstNameLabelText=First Name

#XFLD: Label for Last Name
lastNameLabelText=Last Name

#XFLD: Label for Age
ageLabelText=Age
Preview

App with a toolbar that contains a Refresh button
Coding
You can view and download all files at OData V4 - Step 2.

webapp/controller/App.controller.js

sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"sap/m/MessageToast",
	"sap/m/MessageBox",
	"sap/ui/model/json/JSONModel"
], function (Controller, MessageToast, MessageBox, JSONModel) {
	"use strict";

	return Controller.extend("sap.ui.core.tutorial.odatav4.controller.App", {

		onInit : function () {
			var oJSONData = {
				busy : false
			};
			var oModel = new JSONModel(oJSONData);
			this.getView().setModel(oModel, "appView");
		},

		onRefresh : function () {
			var oBinding = this.byId("peopleList").getBinding("items");

			if (oBinding.hasPendingChanges()) {
				MessageBox.error(this._getText("refreshNotPossibleMessage"));
				return;
			}
			oBinding.refresh();
			MessageToast.show(this._getText("refreshSuccessMessage"));
		},

		_getText : function (sTextId, aArgs) {
			return this.getOwnerComponent().getModel("i18n").getResourceBundle().getText(sTextId, aArgs);

		}
	});
});
We add the event handler onRefresh to the controller. In this method, we retrieve the current data binding of the table. If the binding has unsaved changes, we display an error message, otherwise we call refresh() and display a success message.

Note
At this stage, our app cannot have unsaved changes. We will change this in Step 6.

We also add the private method _getText to retrieve translatable texts from the resource bundle (i18n model).
webapp/view/App.view.xml

...
<Page title="{i18n>peoplePageTitle}">
	<content>
		<Table
			id="peopleList"
			growing="true"
			growingThreshold="10"
			items="{
				path: '/People'
			}">
			<headerToolbar>
				<OverflowToolbar>
					<content>
						<ToolbarSpacer/>
						<Button
							id="refreshUsersButton"
							icon="sap-icon://refresh"
							tooltip="{i18n>refreshButtonText}"
							press=".onRefresh"/>
						</content>
					</OverflowToolbar>
				</headerToolbar>

				<columns>
...
We add the headerToolbar with a single Button to the Table. The button has a press event to which we attach an event handler called onRefresh.

webapp/i18n/i18n.properties

# App Descriptor
...

# Toolbar
#XTOL: Tooltip for refresh data
refreshButtonText=Refresh Data

# Table Area
...

# Messages
#XMSG: Message for refresh failed
refreshNotPossibleMessage=Before refreshing, please save or revert your changes

#XMSG: Message for refresh succeeded
refreshSuccessMessage=Data refreshed